apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

// added manually
project.ext.envConfigFiles = [
    production: ".env.production",
    development: ".env.development",
]
import com.android.build.OutputFile

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle" // added manually

//def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

def reactNativeRoot = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath()
/**
 This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react {
  /* Folders */
  //   The root of your project, i.e. where "package.json" lives. Default is '..'
  // root = file("../")
  //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
   reactNativeDir = file("${reactNativeRoot}")
  //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    codegenDir = file("../../../../node_modules/react-native-codegen")
  //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    //entryFile= "index.tsx" // added manually

   // composeSourceMapsPath= file("${reactNativeRoot}/scripts/compose-source-maps.js")
   cliFile = file("${reactNativeRoot}/cli.js")
  /* Variants */
  //   The list of variants to that are debuggable. For those we're going to
  //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
  //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
  // debuggableVariants = ["liteDebug", "prodDebug"]
  /* Bundling */
  //   A list containing the node command and its flags. Default is just 'node'.
  // nodeExecutableAndArgs = ["node"]
  //
  //   The command to run when bundling. By default is 'bundle'
  // bundleCommand = "ram-bundle"
  //
  //   The path to the CLI configuration file. Default is empty.
  // bundleConfig = file(../rn-cli.config.js)
  //
  //   The name of the generated asset file containing your JS bundle
  // bundleAssetName = "MyApplication.android.bundle"
  //
  //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
   entryFile = file("../../index.tsx")
  //
  //   A list of extra flags to pass to the 'bundle' commands.
  //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
  // extraPackagerArgs = []
  /* Hermes Commands */
  //   The hermes compiler command to run. By default it is 'hermesc'
   hermesCommand = "${reactNativeRoot}/sdks/hermesc/%OS-BIN%/hermesc"
  //
  //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
  // hermesFlags = ["-O", "-output-source-map"]
}
/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */


configurations.all {
    resolutionStrategy {
        force 'androidx.test:core:1.5.0'
    }
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true // changed for obfuscation

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    // added manually
    flavorDimensions "default"
    productFlavors {
        production {
        }
        development {
            applicationIdSuffix ".dev"
        }
    }
    // ---
  namespace "com.catalystuireactnativestarter"
    defaultConfig {
        applicationId "com.catalystuireactnativestarter"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.hasProperty('versionCode') ? project.property('versionCode') as int : 1
        versionName project.hasProperty('versionName') ? project.property('versionName') : "No versionName"
        resValue "string", "build_config_package", "com.catalystuireactnativestarter" // added manually
        testBuildType System.getProperty('testBuildType', 'debug') // Detox
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner' // Detox
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (System.getenv("APP_UPLOAD_SIGNING_KEYSTORE")) {
                storeFile file(System.getenv("APP_UPLOAD_SIGNING_KEYSTORE"))
                storePassword System.getenv("APP_UPLOAD_STORE_PASSWORD")
                keyAlias System.getenv("APP_UPLOAD_KEY_ALIAS")
                keyPassword System.getenv("APP_UPLOAD_KEY_PASSWORD")
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug', 'release'] // added manually
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release

            // added for obfuscation
            debuggable false
            shrinkResources enableProguardInReleaseBuilds
            zipAlignEnabled enableProguardInReleaseBuilds
            // ...
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro" // Detox
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    androidTestImplementation('com.wix:detox:+') {
        exclude module: "protobuf-lite"
    }// Detox
    implementation 'androidx.appcompat:appcompat:1.1.0' //Detox
    implementation 'androidx.core:core-splashscreen:1.0.0-beta02'

  // The version of react-native is set by the React Native Gradle Plugin
  implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
  implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")
//   implementation project(':react-native-splash-screen')
  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// configurations.all {
//     resolutionStrategy {
//         force 'androidx.test:core:1.5.0'
//     }
// }

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle"); applyNativeModulesAppBuildGradle(project)


